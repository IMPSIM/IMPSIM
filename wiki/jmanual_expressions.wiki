#summary One-sentence summary of this page.

= Introduction =

IMP Expressions allow you to dynamically change the positions of joints and bodies as time goes on.  Expressions are core to the idea of transforming IMP from a modeling engine into a simulation engine.

= Expressions =
In order to reach a large audience, expressions in IMP are familiar to expressions in math and other programming languages, with one exception.  In most languages, a variable assignment results in a value being assigned to a variable.  However, in IMP, the expressions themselves are stored into variables.

For instance, in most programming languages the following expression:
{{{
X = Y + 3
}}}
would take the value of Y, add 3, and assign the result to X. Thus,
{{{
Y = 3
X = Y + 3
Y = 12
}}}
would result in X having a value of 6, and Y having a value of 12.

In IMP, when the above commands are executed, the expression "Y + 3" is stored into X, meaning that whenever the value of X is requested, the expression "Y + 3" is reevaluated.  Thus at the end of the following:
{{{
Y = 3
X = Y + 3
Y = 12
}}}
X would evaluate to 15, and Y would evaluate to 12.

== Operators ==
As has already been demonstrated, IMP understands the concept of operators.  In fact, IMP supports several operators, most of which are math based.  The operators supported, with their precedence, are as follows:

|| *Precedence* ||  *Symbol* ||  *Name* ||  *Description* || 
|| 1 ||  () ||  Parenthesis ||  Used for grouping || 
|| 1 ||  {} ||  Curly Brackets ||  Used for specifying lists || 
|| 2 ||  - ||  Negation ||  Used to negate a number/point || 
|| 3 ||  ^ ||  Exponent ||  Raise one number to another || 
|| 4 ||  * ||  Multiplication ||  Multiply two numbers together || 
|| 4 ||  / ||  Division ||  Divide two numbers together || 
|| 5 ||  + ||  Plus ||  Add two numbers together || 
|| 5 ||  - ||  Minus ||  Subtract two numbers || 
|| 6 ||  & ||  Concatenation ||  Concatenate two values to a string || 
|| 7 ||  , ||  Comma ||  Parameter Separation || 
|| 10 ||  = ||  Equals ||  Assign a value to a variable || 

== Functions ==
While many expressions can be represented only with operators, there are some situations in which it is more efficient or even necessary to express an expressions with higher level constructs.  For this purpose, IMP has functions.

Functions in IMP resemble functions in other languages.  Use the name of the function, a parenthesis, the parameters to give to the function, and a closing parenthesis.
{{{
X = MYFUNCTION(ARG1, 7)
}}}
For instance, the SIN of the absolute value of X can be found as follows:
{{{
Y = SIN( ABS(X) )
}}}
The list of functions that IMP supports by default can be found at [jmanual_functionlist].

If multiple functions exist with the same name, use the namespace qualifier to distinguish between functions:

{{{
X1 = IMP~CORE~ABS(-Y)
X2 = YOUR~OWN~ABS(-Y)
}}}

== Data Types ==

While the most common type of data used in a physics engine is a single number, there are a couple of other data types supported to make the IMP engine more robust.

=== Numbers ===
The most basic data type, the number, is also the most familiar to the world.  As such, it can be used in the same manner as in math:
{{{
X1 = 3.4323
X2 = 2
X3 = 234e3
X4 = -34e-1
}}}

=== Points ===
Points are merely a set of 3 numbers, constructed with the POINT function.  Points are used to hold coordinates and to specify locations of data:
{{{
P1 = POINT(12.3, 43.2, 10.3)
P2 = POINT()
#POINT() without parameters is equivalent to:
P3 = POINT(0,0,0)
}}}

=== Strings ===
Strings in imp are used to relay information to the user as messages, or for specifying filenames: 
{{{
SYSTEM[TITLE] = "Hello, World!"
}}}
In order to create dynamic messages, the concatenation operator can be used to "glue" data (even different data types) together:
{{{
SYSTEM[TITLE] = "Hello " & NAME & "!"
}}}